name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
  AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  AZURE_SEARCH_ENDPOINT: ${{ secrets.AZURE_SEARCH_ENDPOINT }}
  AZURE_SEARCH_KEY: ${{ secrets.AZURE_SEARCH_KEY }}

jobs:
  lint-and-validate:
    name: Lint and Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.12.3
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Validate CSS
      run: node scripts/validate-css.js
      
    - name: Run ESLint
      run: pnpm run lint
      
    - name: TypeScript type check
      run: npx tsc --noEmit

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.12.3
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run unit tests with coverage
      run: pnpm run test:unit:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-validate, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.12.3
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run database migrations
      run: pnpm db:migrate
      
    - name: Build application
      run: pnpm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: .next/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.12.3
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Install Playwright browsers
      run: pnpm exec playwright install --with-deps
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: .next/
        
    - name: Run E2E tests
      run: pnpm run test:e2e
      env:
        PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: test-results/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.12.3
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run security audit
      run: pnpm audit --audit-level moderate
      
    - name: Check for known vulnerabilities
      run: |
        pnpm list --depth=0 | grep -E "(WARN|ERROR)" || true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, unit-tests, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel Staging
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, unit-tests, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Run post-deployment tests
      run: |
        sleep 30 # Wait for deployment to propagate
        curl -f https://your-production-domain.vercel.app/api/ping || exit 1
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "ðŸŽ‰ Production deployment successful!"
        echo "âœ… All tests passed"
        echo "ðŸš€ Application is live at https://your-production-domain.vercel.app"

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://your-production-domain.vercel.app
          https://your-production-domain.vercel.app/analytics
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true